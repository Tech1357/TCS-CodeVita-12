def solve():
    # 14-segment display for all uppercase English letters
    letter_map = {
        "A": [
            "11111", 
            "10001", 
            "10001", 
            "11111", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001"
        ],
        "B": [
            "11110", 
            "10001", 
            "10001", 
            "11110", 
            "10001", 
            "10001", 
            "10001", 
            "11110", 
            "11110"
        ],
        "C": [
            "11111", 
            "10000", 
            "10000", 
            "10000", 
            "10000", 
            "10000", 
            "10000", 
            "11111", 
            "11111"
        ],
        "D": [
            "11110", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "11110", 
            "11110"
        ],
        "E": [
            "11111", 
            "10000", 
            "10000", 
            "11110", 
            "10000", 
            "10000", 
            "10000", 
            "11111", 
            "11111"
        ],
        "F": [
            "11111", 
            "10000", 
            "10000", 
            "11110", 
            "10000", 
            "10000", 
            "10000", 
            "10000", 
            "10000"
        ],
        "G": [
            "11111", 
            "10000", 
            "10000", 
            "10000", 
            "10010", 
            "10001", 
            "10001", 
            "11111", 
            "11111"
        ],
        "H": [
            "10001", 
            "10001", 
            "10001", 
            "11111", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001"
        ],
        "I": [
            "11111", 
            "00100", 
            "00100", 
            "00100", 
            "00100", 
            "00100", 
            "00100", 
            "11111", 
            "11111"
        ],
        "J": [
            "00001", 
            "00001", 
            "00001", 
            "00001", 
            "00001", 
            "10001", 
            "10001", 
            "11111", 
            "11111"
        ],
        "K": [
            "10001", 
            "10001", 
            "10010", 
            "10100", 
            "11000", 
            "10100", 
            "10010", 
            "10001", 
            "10001"
        ],
        "L": [
            "10000", 
            "10000", 
            "10000", 
            "10000", 
            "10000", 
            "10000", 
            "10000", 
            "11111", 
            "11111"
        ],
        "M": [
            "10001", 
            "10001", 
            "10101", 
            "10101", 
            "11011", 
            "11011", 
            "11111", 
            "11111", 
            "10001"
        ],
        "N": [
            "10001", 
            "11001", 
            "11001", 
            "10101", 
            "10101", 
            "10101", 
            "10101", 
            "10001", 
            "10001"
        ],
        "O": [
            "11111", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "11111", 
            "11111"
        ],
        "P": [
            "11111", 
            "10001", 
            "10001", 
            "11111", 
            "10000", 
            "10000", 
            "10000", 
            "10000", 
            "10000"
        ],
        "Q": [
            "11111", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10101", 
            "11111", 
            "11111"
        ],
        "R": [
            "11111", 
            "10001", 
            "10001", 
            "11111", 
            "10100", 
            "10010", 
            "10001", 
            "10001", 
            "10001"
        ],
        "S": [
            "11111", 
            "10000", 
            "10000", 
            "11111", 
            "00001", 
            "00001", 
            "00001", 
            "11111", 
            "11111"
        ],
        "T": [
            "11111", 
            "00100", 
            "00100", 
            "00100", 
            "00100", 
            "00100", 
            "00100", 
            "00100", 
            "00100"
        ],
        "U": [
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "11111", 
            "11111"
        ],
        "V": [
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "01010", 
            "01010", 
            "00100"
        ],
        "W": [
            "10001", 
            "10001", 
            "10001", 
            "10001", 
            "10101", 
            "10101", 
            "10101", 
            "11111", 
            "11111"
        ],
        "X": [
            "10001", 
            "10001", 
            "01010", 
            "01010", 
            "00100", 
            "01010", 
            "01010", 
            "10001", 
            "10001"
        ],
        "Y": [
            "10001", 
            "10001", 
            "01010", 
            "00100", 
            "00100", 
            "00100", 
            "00100", 
            "00100", 
            "00100"
        ],
        "Z": [
            "11111", 
            "00001", 
            "00010", 
            "00100", 
            "01000", 
            "10000", 
            "10000", 
            "11111", 
            "11111"
        ]
    }
    
    # Input reading
    grid = [input().strip() for _ in range(9)]
    
    # Convert grid into columns and parse letters
    output = []
    col_idx = 0
    
    # Loop through the columns of the grid
    while col_idx < len(grid[0]):
        # Extract the 9x5 block for the next letter
        letter_block = [row[col_idx:col_idx+5] for row in grid]
        
        # Check if this block matches any letter
        for letter, pattern in letter_map.items():
            if letter_block == pattern:
                output.append(letter)
                break
        
        # Skip over any padding (zeros)
        padding = 0
        while col_idx + padding < len(grid[0]) and all(grid[row][col_idx + padding] == '0' for row in range(9)):
            padding += 1
        
        col_idx += 5 + padding
    
    # Print the output as the decoded message
    print(''.join(output))

